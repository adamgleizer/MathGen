{"version":3,"sources":["Problem.ts","AnswerField.tsx","App.tsx","Choice.tsx","serviceWorker.js","index.tsx"],"names":["ProblemGenerator","operation","upperBound","num1","Math","floor","random","num2","Problem","firstOperand","secondOperand","expressionEquals","result","compute","op","this","printedOperation","other","AnswerField","props","showAnswer","DisplayAnswerField","answer","TextField","id","value","InputAnswerField","state","currentVal","correct","event","console","log","target","toString","setState","color","name","onChange","bind","React","Component","generateProblems","problems","i","problem","some","existingProblem","equals","push","App","showAnswers","toggleAnswers","regenerateProblems","newProblems","Grid","container","alignItems","direction","item","justify","spacing","FormControlLabel","control","Switch","checked","label","Button","variant","onClick","map","key","Box","width","choice","subtractionPicked","pickOperation","param","context","e","Container","Typography","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","gutterBottom","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5125ee81.chunk.js","sourcesContent":["\nexport type Operation = \"+\" | \"-\" | \"×\" | \"÷\" | \"- nonNegative\"\n\n\nexport function ProblemGenerator(operation: Operation): Problem {\n    var upperBound: number = 10;\n    const num1 = Math.floor((Math.random() * upperBound) + 1);\n    if (operation === \"- nonNegative\") {\n        upperBound = num1;\n    }\n    const num2 = Math.floor((Math.random() * upperBound) + 1);\n    return new Problem(num1, num2, operation);\n}\n\nexport class Problem {\n    readonly firstOperand: number;\n    readonly secondOperand: number;\n    readonly expressionEquals: string;\n    readonly result: number;\n\n    constructor(firstOperand: number, secondOperand: number, operation: Operation) {\n        this.firstOperand = firstOperand\n        this.secondOperand = secondOperand;\n        var printedOperation : Operation = operation === \"- nonNegative\" ? \"-\" : operation\n\n        this.expressionEquals = `${firstOperand}${printedOperation}${secondOperand}=`;\n        this.result = this.compute(firstOperand, secondOperand, operation)\n    }\n\n    equals(other: Problem) {\n        if (other.expressionEquals === this.expressionEquals && other.result === this.result) {\n            return true;\n        }\n        return false;\n    }\n\n    private compute = (num1: number, num2: number, op: Operation) => {\n        var result: number;\n        switch (op) {\n            case \"+\": {\n                result = num1 + num2\n                break\n            }\n            case \"-\" : {\n                result = num1 - num2\n                break\n            }\n            case \"- nonNegative\" : {\n                result = num1 - num2\n                break\n            }\n            case \"×\": {\n                result = num1 * num2\n                break\n            }\n            case \"÷\": {\n                result = num1 / num2 // make sure to handle div by zero\n                break\n            }\n        }\n        return result\n    }\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function AnswerField(props: {answer: number, showAnswer: boolean}) {\n    if (props.showAnswer) {\n        return (\n            <DisplayAnswerField answer={props.answer} />\n        )\n    } else {\n        return (\n            <InputAnswerField answer={props.answer} />\n        )\n    }\n}\n\nfunction DisplayAnswerField(props: {answer: number} ) {\n    return (\n        <form>\n        <TextField\n            id=\"standard-basic\"\n            value={props.answer}\n        >\n        </TextField>\n        </form>\n    )\n}\n\ntype Props = { answer: number }\ntype State = { currentVal: string, correct: boolean }\n\nclass InputAnswerField extends React.Component<Props\n  , State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = { currentVal: '', correct: false }\n  }\n\n  onChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n    console.log(typeof event)\n    if (event.target.value === this.props.answer.toString()) {\n      this.setState({ correct: true })\n    }\n    else {\n      this.setState({ correct : false })\n    }\n  }\n  render() {\n    var color : \"primary\" | \"secondary\" = this.state.correct ? \"primary\" : \"secondary\"\n    return (\n      <TextField\n        color={color}\n        name=\"phone\"\n        onChange={this.onChange.bind(this)}\n      />\n    )\n  }\n}","import React from 'react';\nimport { ProblemGenerator, Problem, Operation } from './Problem';\nimport AnswerField from './AnswerField'\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\ntype State = {\n  problems: Array<Problem>,\n  showAnswers: boolean\n}\n\ntype Props = {operation: Operation}\n\nclass App extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    var showAnswers: boolean = false\n    var problems: Array<Problem> = generateProblems(this.props.operation)\n\n    this.state = { problems: problems, showAnswers: showAnswers }\n\n    // This binding is necessary to make `this` work in the callback    \n    this.toggleAnswers = this.toggleAnswers.bind(this);\n    this.regenerateProblems = this.regenerateProblems.bind(this);\n  }\n\n  toggleAnswers() {\n    this.setState((state) => ({\n      showAnswers: !state.showAnswers\n    }));\n  }\n\n  regenerateProblems() {\n    const newProblems = generateProblems(this.props.operation)\n    this.setState((state) => ({\n      problems: newProblems \n    }))\n  }\n\n  render() {\n    return (\n      <Grid container alignItems=\"center\" direction=\"column\">\n        <Grid container item justify=\"center\" spacing={1}>\n          <Grid item>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={this.state.showAnswers}\n                  onChange={this.toggleAnswers}\n                  name=\"checkedB\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Toggle Answers\"\n            />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.regenerateProblems}>Refresh</Button>\n          </Grid>\n        </Grid>\n        <Grid container item justify=\"center\">\n          <ol>\n            {this.state.problems.map(problem => (\n              <li key={`${problem.firstOperand}${problem.secondOperand}`}>\n                <Box width={290}>\n                  <Grid container justify=\"space-between\" alignItems=\"center\" spacing={0}>\n                    <Grid item>\n                      {problem.expressionEquals}\n                    </Grid>\n                    <Grid item>\n                      <AnswerField\n                        answer={problem.result}\n                        showAnswer={this.state.showAnswers} \n                        />\n                    </Grid>\n                  </Grid>\n                </Box>\n\n              </li>\n            ))}\n          </ol>\n        </Grid>   \n      </Grid>\n    )\n  }\n}\n\nfunction generateProblems(operation: Operation) : Array<Problem> {\n  const problems: Array<Problem> = []\n  for (var i = 0; i < 20; i++) {\n    var problem: Problem\n    do {\n      problem = ProblemGenerator(operation)\n    } while (problems.some(existingProblem => existingProblem.equals(problem)))\n    problems.push(problem)\n  }\n  return problems\n}\n\nexport default App;\n","import React from 'react'\nimport {Operation} from './Problem'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport App from './App'\n\ntype State = {operation : null | Operation, subtractionPicked : boolean | null}\ntype Props = {}\n\nexport default class choice extends React.Component<Props,State> {\n    constructor(props: Props) {\n        super(props)\n        this.state = {operation: null, subtractionPicked: null}\n        this.pickOperation = this.pickOperation.bind(this);\n    }\n\n    pickOperation(param: Operation | \"subtraction\") {\n        var context = this\n        if (param === \"subtraction\") {\n            return function(e: any) {\n                context.setState({subtractionPicked: true})\n            }\n        }\n        else {\n            return function(e: any) {\n                context.setState({operation: param})\n            }\n        }\n    }\n\n    render() {\n        if (this.state.operation) {\n            return (\n                <App operation={this.state.operation}/>\n            )\n        } \n        else if (this.state.subtractionPicked) {\n            return (\n                <Container>\n                    <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h4\">Allow Negative Numbers?</Typography>\n                        </Grid>\n                        <Grid item>\n                            <Button variant=\"contained\" onClick={this.pickOperation(\"-\")}>Yes</Button>\n                            <Button variant=\"contained\" onClick={this.pickOperation(\"- nonNegative\")}>No</Button>\n                        </Grid>\n                    </Grid>\n                </Container>\n            )\n        }\n        else {\n            return(\n                <Container>\n                    <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h4\">Please select an operation</Typography>\n                        </Grid>\n                        <Grid item>\n                            <Button variant=\"contained\" onClick={this.pickOperation(\"+\")}>+</Button>\n                            <Button variant=\"contained\" onClick={this.pickOperation(\"×\")}>×</Button>\n                            <Button variant=\"contained\" onClick={this.pickOperation(\"÷\")}>÷</Button>\n                            <Button variant=\"contained\" onClick={this.pickOperation(\"subtraction\")}>-</Button>\n                        </Grid>\n                    </Grid>\n                </Container>\n            )\n        }\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Choice from './Choice';\nimport * as serviceWorker from './serviceWorker';\nimport { Typography } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Typography gutterBottom color=\"textSecondary\"><a href=\"https://github.com/ykhas/MathGen\">Source Code</a>. Created by Yaniv Khaslavsky. </Typography>\n    <Choice />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}