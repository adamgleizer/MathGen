{"version":3,"sources":["Problem.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["ProblemGenerator","operation","num1","Math","floor","random","num2","Problem","firstOperand","secondOperand","expressionEquals","result","compute","op","this","other","AnswerField","props","TextField","id","value","answer","App","problems","i","problem","some","existingProblem","equals","push","state","showAnswers","toggleAnswers","bind","setState","Fragment","FormControlLabel","control","Switch","checked","onChange","name","color","label","map","key","Grid","container","justify","alignItems","spacing","item","xs","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAIO,SAASA,EAAiBC,GAC7B,IAAMC,EAAOC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GACzCC,EAAOH,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC/C,OAAO,IAAIE,EAAQL,EAAMI,EAAML,GAG5B,IAAMM,EAAb,WAMI,WAAYC,EAAsBC,EAAuBR,GAAuB,yBALvEO,kBAKsE,OAJtEC,mBAIsE,OAHtEC,sBAGsE,OAFtEC,YAEsE,OAcvEC,QAAU,SAACV,EAAcI,EAAcO,GAC3C,IAAIF,EACJ,OAAQE,GACJ,IAAK,IACDF,EAAST,EAAOI,EAChB,MAEJ,IAAK,IACDK,EAAST,EAAOI,EAChB,MAEJ,IAAK,OACDK,EAAST,EAAOI,EAChB,MAEJ,IAAK,OACDK,EAAST,EAAOI,EAIxB,OAAOK,GAjCPG,KAAKN,aAAeA,EACpBM,KAAKL,cAAgBA,EACrBK,KAAKJ,iBAAL,UAA2BF,EAA3B,YAA2CC,EAA3C,KACAK,KAAKH,OAASG,KAAKF,QAAQJ,EAAcC,EAAeR,GAVhE,mDAaWc,GACH,OAAIA,EAAML,mBAAqBI,KAAKJ,kBAAoBK,EAAMJ,SAAWG,KAAKH,WAdtF,K,wCCmEA,SAASK,EAAYC,GAEnB,OACE,8BACE,kBAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAOH,EAAMI,UAONC,M,kDAzEb,WAAYL,GAAe,IAAD,sBACxB,cAAMA,GAIN,IAHA,IACIM,EAA4B,GAEvBC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EACJ,GACEA,EAAUzB,EAAiB,WACpBuB,EAASG,MAAK,SAAAC,GAAe,OAAIA,EAAgBC,OAAOH,OACjEF,EAASM,KAAKJ,GAVQ,OAaxB,EAAKK,MAAQ,CAACP,SAAUA,EAAUQ,aAXP,GAc3B,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAhBG,E,4DAoBxBnB,KAAKoB,UAAS,SAACJ,GAAD,MAAY,CACxBC,aAAcD,EAAMC,kB,+BAId,IAAD,OACP,OACE,kBAAC,IAAMI,SAAP,KACE,kBAACC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASzB,KAAKgB,MAAMC,YACpBS,SAAU1B,KAAKkB,cACfS,KAAK,WACLC,MAAM,YAGVC,MAAM,mBAER,4BACG7B,KAAKgB,MAAMP,SAASqB,KAAI,SAAAnB,GAAO,OAC9B,wBAAIoB,IAAG,UAAKpB,EAAQjB,cAAb,OAA4BiB,EAAQhB,gBACzC,kBAACqC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,aAAaC,WAAW,SAASC,QAAS,GAChE,kBAACJ,EAAA,EAAD,CAAMK,MAAI,GACP1B,EAAQf,kBAEX,kBAACoC,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GACb,kBAACpC,EAAD,CACEK,OAAQ,EAAKS,MAAMC,YAAcN,EAAQd,OAAS,iB,GAlDpD0C,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7edf60c5.chunk.js","sourcesContent":["\nexport type Operation = \"+\" | \"-\" | \"×\" | \"÷\"\n\n\nexport function ProblemGenerator(operation: Operation): Problem {\n    const num1 = Math.floor((Math.random() * 10) + 1);\n    const num2 = Math.floor((Math.random() * 10) + 1);\n    return new Problem(num1, num2, operation);\n}\n\nexport class Problem {\n    readonly firstOperand: number;\n    readonly secondOperand: number;\n    readonly expressionEquals: string;\n    readonly result: number;\n\n    constructor(firstOperand: number, secondOperand: number, operation: Operation) {\n        this.firstOperand = firstOperand\n        this.secondOperand = secondOperand;\n        this.expressionEquals = `${firstOperand}+${secondOperand}=`;\n        this.result = this.compute(firstOperand, secondOperand, operation)\n    }\n\n    equals(other: Problem) {\n        if (other.expressionEquals === this.expressionEquals && other.result === this.result) {\n            return true;\n        }\n        return false;\n    }\n\n    private compute = (num1: number, num2: number, op: Operation) => {\n        var result: number;\n        switch (op) {\n            case \"+\": {\n                result = num1 + num2\n                break\n            }\n            case \"-\": {\n                result = num1 - num2\n                break\n            }\n            case \"×\": {\n                result = num1 * num2\n                break\n            }\n            case \"÷\": {\n                result = num1 / num2 // make sure to handle div by zero\n                break\n            }\n        }\n        return result\n    }\n}\n","import React from 'react';\nimport {ProblemGenerator, Problem} from './Problem';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\ntype State = {\n  problems: Array<Problem>,\n  showAnswers: boolean\n}\n\ntype Props = {}\n\nclass App extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    var showAnswers: boolean = false\n    var problems : Array<Problem> = []\n\n    for (var i = 0; i < 20; i++) {\n      var problem: Problem\n      do {\n        problem = ProblemGenerator(\"+\")\n      } while (problems.some(existingProblem => existingProblem.equals(problem)))\n      problems.push(problem)\n    }\n\n    this.state = {problems: problems, showAnswers: showAnswers}\n\n    // This binding is necessary to make `this` work in the callback    \n    this.toggleAnswers = this.toggleAnswers.bind(this);\n  }\n\n  toggleAnswers() {\n    this.setState((state) => ({\n      showAnswers: !state.showAnswers\n    }));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <FormControlLabel\n          control={\n            <Switch\n              checked={this.state.showAnswers}\n              onChange={this.toggleAnswers}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Toggle Answers\"\n        />\n        <ol>\n          {this.state.problems.map(problem => (\n            <li key={`${problem.firstOperand}${problem.secondOperand}`}>\n              <Grid container justify=\"flex-start\" alignItems=\"center\" spacing={1}>\n                <Grid item>\n                  {problem.expressionEquals}\n                </Grid>\n                <Grid item xs={1}>\n                  <AnswerField \n                    answer={this.state.showAnswers ? problem.result : \"\"}\n                  />\n                </Grid>\n              </Grid>\n            </li>\n          ))}\n        </ol>\n      </React.Fragment>\n    )\n  }\n}\n\nfunction AnswerField(props: {answer: number | string}) {\n\n  return (\n    <form>\n      <TextField\n        id=\"standard-basic\"\n        value={props.answer}\n      >\n      </TextField>\n    </form>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}